import collections
import matplotlib.pyplot as plt
import pandas as pd
import nltk, re, pprint
from nltk import word_tokenize
import sklearn as skms
from sklearn import tree

    


class AI:
    TotalFreq= {}
    whatFreqOn=0
    

    def __init__(self):
        self.TotalFreq[0]=None
        self.whatFreqOn=0

    def LineToken(self, line):
        Line= input("What the line were going to break up:")
        token= word_tokenize(Line)
        print(token)


    def Line(self):
        Line= input("What the line were going to break up:")
        ngram= input("What ngram r we doing:")

        LenOfLine= len(Line)
        List= []
        size= int(ngram, base = 10)



        
        for i in range(LenOfLine-int(ngram)+1):
            List.append(Line[int(i): int(i) +int(ngram)])
        print(List)


    def textFile(self):
        #ngram= input("What ngram r we doing:")
        ngram=3
        List= []
        Dict= {}
        fileName= input("Whats the name of the file?")
        Textfile= open(fileName, "r")
        Plain= Textfile.readlines()
        numLines= len(Plain)
        for i in range(numLines):
            size = len(Plain[i])
            for x in range(size- int(ngram)+1):
                List.append(Plain[i][int(x) : int(x) + int(ngram)])
        print(List)
        print(Plain)
        data= pd.Series(List)
        print(data.value_counts())
        FreqTable= data.value_counts()
        print(FreqTable[4])

        self.TotalFreq[self.whatFreqOn]= FreqTable
        self.whatFreqOn= self.whatFreqOn + 1

        print(self.TotalFreq[0])

        
    def textFiletoCSV(self):
        #ngram= input("What ngram r we doing:")
        for i in range(8):
            ngram=3
            List= []
            Dict= {}
            fileName= input("Whats the name of the file?")
            Textfile= open(fileName, "r")
            Plain= Textfile.readlines()
            numLines= len(Plain)
            for i in range(numLines):
                size = len(Plain[i])
                for x in range(size- int(ngram)+1):
                    List.append(Plain[i][int(x) : int(x) + int(ngram)])
            print(List)
            print(Plain)
            data= pd.Series(List)
            print(data.value_counts())
            FreqTable= data.value_counts()
            print(FreqTable[4])

            self.TotalFreq[self.whatFreqOn]= FreqTable
            self.whatFreqOn= self.whatFreqOn + 1

            print(self.TotalFreq[0])
        BenqData= pd.DataFrame({'Author': ['Author A', 'Author A', 'Author A', 'Author A', 'Author A', 'Author A', 'Author A'], 'FreqTables': [self.TotalFreq[0], self.TotalFreq[1], self.TotalFreq[2], self.TotalFreq[3], self.TotalFreq[4], self.TotalFreq[5], self.TotalFreq[6], self.TotalFreq[7]]})
        datatoexcel = pd.ExcelWriter('CarsData1.xlsx')
        BenqData.to_excel(datatoexcel)
        datatoexcel.save()
        print('DataFrame is written to Excel File successfully.')



    def textFileToken(self):
       fileName= input("Whats the name of the file?")
       Textfile= open(fileName, "r")
       Plain= Textfile.readlines()
       numLines= len(Plain)
       
       token= word_tokenize(Plain)
       print(token)

    #def editTextfile():
        

    def decisionTree(self):
        dtc= tree.DecisionTreeClassifier()
        output= [0,1]
        dtc.fit(self.TotalFreq, self.TotalFreq)



def main():
    test= AI()
    test.textFiletoCSV()

    #for i in range(8):
      #  test.textFile()

    test.decisionTree()
    
    
        
          
                

main()


